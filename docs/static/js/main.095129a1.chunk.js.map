{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategorias","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","category","loading","state","setstate","useEffect","then","imgs","console","log","useFetchGifs","GifExpertApp","props","categorias","ReactDOM","render","document","getElementById"],"mappings":"mMA2CeA,EAxCK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAGlB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAqBA,OACI,sBAAMC,SAfW,SAACC,GAElBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAQ,IAG1BR,GAAe,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAMlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAvBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCTlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DAEbC,EAFa,0FAE4EC,UAAUH,GAFtF,sBAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAcZM,GAdY,4CAAH,sDCYLO,EATK,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACzB,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAIA,QCoDDO,EAnDQ,SAAC,GAAgB,IAAfC,EAAc,EAAdA,SAsBrB,ECPwB,SAACA,GACzB,MAA0BlC,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAyBA,OApBAC,qBAAU,WACNzB,EAAQqB,GACCK,MAAM,SAAAC,GAGHC,QAAQC,IAAI,oBACZL,EAAS,CACLhB,KAAMmB,EACNL,SAAS,SAQ1B,CAACD,IAIGE,EDnBwBO,CAAaT,GAAhCP,EAAZ,EAAON,KAAac,EAApB,EAAoBA,QAIpB,OACI,qCACI,oBAAIL,UAAU,oCAAd,SAAmDI,IAEnD,sBAAKJ,UAAU,YAAf,UAEKK,GAAW,mBAAGL,UAAU,mCAAb,qBAGRH,EAAOJ,KAAK,SAACC,GAAD,OAGR,aAFA,CAEC,EAAD,eAEQA,GADCA,EAAIC,cEEtBmB,EAzCM,SAAAC,GAQjB,MAAoC7C,mBAAU,CAAC,kBAA/C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAWA,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAIA,6BAEQ+C,EAAWvB,KAAK,SAAAT,GACZ,OAAO,cAAC,EAAD,CAEKoB,SAAUpB,GADLA,Y,MClCzCiC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.095129a1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst AddCategory = ({setcategorias}) => {\r\n\r\n    // si dejo useState() el estado actual es undefined y va a tronar\r\n    const [inputValue, setinputValue] = useState('');\r\n    \r\n    // el onChange se va a disparar cada vez que el input cambie\r\n    const handleInputChange = (e) => {\r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        // para que no recarge la página \r\n        e.preventDefault();\r\n\r\n        // para no guardar nada vacio\r\n        if (inputValue.trim().length> 2) {\r\n            // como no tengo acceso a las categorías lo hago así\r\n            //  estadoAnterior => nuevoValor\r\n            setcategorias( cat => [inputValue, ...cat] );\r\n            setinputValue('');\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <input \r\n                type=\"text\"\r\n                value={inputValue}\r\n                onChange= {handleInputChange}\r\n            >\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setcategorias: PropTypes.func.isRequired\r\n}\r\n\r\nexport default AddCategory\r\n","// el encodeURI reemplaza los espacios por % \r\nexport const getGifs = async( categoria ) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=XZqWutkwaLr1Ntx3bFybvrtnQPlNLVhB&q=${encodeURI(categoria)}&limit=10`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    });\r\n    \r\n    return gifs;\r\n}","import React from 'react'\r\n// ojo al usar estilos porque se usa className!!!\r\n\r\n\r\nconst GifGridItem = ({title, url}) => {\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src = {url} alt = {title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GifGridItem\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\n// import { getGifs } from '../helpers/getGifs';\r\nimport GifGridItem from './GifGridItem';\r\n\r\n// CUIDADO porque react renderiza el componente cuando hay un cambio\r\n// entonces usamos el USEEFFECT que me va a permitir ejecutar cierto\r\n//          codigo de manera condicional\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n\r\n    //const [count, setcount] = useState(0);\r\n    // const [images, setimages] = useState([])\r\n\r\n    // en el useEffect primero se le manda una func y luego un []\r\n    //    de dependencias\r\n    // si le mando [] solo se disparará una vez\r\n    // SI LA CATEGORIA CAMBIA DEBERÍA VOLVER A EJECUTAR ESTO\r\n\r\n    // useEffect(()=>{\r\n    //     getGifs(category)\r\n    //     .then( setimages );\r\n    //     //.then ( imgs => setImages(imgs))\r\n    // }, [category]);\r\n\r\n    // el USEEFFECT SE DISPARA SOLO CUANDO CAMBIE LA CATEGORIA \r\n    //              (en nuestro ejemplo no pasara)\r\n    // el USESTATE RENDERIZA CUANDO HAY UN CAMBIO EN EL ESTADO\r\n\r\n    // SI QUEREMOS USAR EL CUSTOM HOOK\r\n    const {data:images, loading} = useFetchGifs(category);\r\n\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3 className=\"animate__animated animate__fadeIn\">{category}</h3>\r\n\r\n            <div className=\"card-grid\">\r\n\r\n                {loading && <p className=\"animate__animated animate__flash\">Loading</p>}\r\n\r\n                {\r\n                    images.map( (img) => (\r\n                        // Podemos enviar las propiedades con un spred\r\n                        // ...img para lleguen allá y podes destructurarlo\r\n                        <GifGridItem\r\n                            key={img.id}\r\n                            {...img}\r\n                        />\r\n                    ))\r\n                }\r\n\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\"\r\nimport { getGifs } from '../helpers/getGifs';\r\n// los customs hooks son una forma de extraer lógica de un componente\r\n//     o lógica a reutilizar para que sea sencillo de usarla nuevamente\r\n\r\n// este custom hook permite realizar el fetch e indicar cuándo está cargando\r\n//      y cuando termino\r\n\r\n// el use significa que es un hook. es una convención\r\n\r\n// los hooks no son más que funciones \r\n// los hooks pueden tener un estado e indicarle a otros componentes cuándo\r\n//     renderizarse porque algo cambio\r\n\r\n// los customs hooks pueden llevar efectos para que no se ejecuten a cada rato\r\n\r\n// LOS EFECTOS NO PUEDEN SER ASYNC\r\n\r\n// el USEEFFECT SE DISPARA SOLO CUANDO CAMBIE LA CATEGORIA \r\n//              (en nuestro ejemplo no pasara)\r\n// el USESTATE RENDERIZA CUANDO HAY UN CAMBIO EN EL ESTADO\r\n\r\n\r\n//acá tenemos una lógica para hacer una carga automática\r\nexport const useFetchGifs = (category) => {\r\n    const [state, setstate] = useState({\r\n        data: [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(()=>{\r\n        getGifs(category)\r\n                .then( imgs => {\r\n\r\n\r\n                    console.log('estoy en el hook')\r\n                    setstate({\r\n                        data: imgs,\r\n                        loading: false\r\n                    });\r\n\r\n                    \r\n                })\r\n        //getGifs(category)\r\n        //.then( setimages );\r\n        //.then ( imgs => setImages(imgs))\r\n    }, [category]);\r\n\r\n    \r\n\r\n    return state; // state es un arreglo {data: [], loading: true}\r\n}","import React, {useState} from 'react'\r\nimport AddCategory from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\n\r\n// cómo crear una lista en el html usando un arreglo que tengo en el js\r\n// podemos usar el .map, es tipo un ciclo y ahí podemos retornar etiquetas\r\n//         pero cada hijo debe tener una llave única key={clave}\r\n//         NO COLOCAR EL INDICE COMO KEY\r\nconst GifExpertApp = props => {\r\n\r\n    // NO SE DEJA QUEMADO PORQUE NO SÉ SI LUEGO QUIERA CAMBIAR ALGO\r\n    //const categorias = ['Valorant', 'Bob Esponja', 'Barcelona']\r\n\r\n    // Entonces debemos usar el USESTATE\r\n    // cuando cambie el estado entonces REACT se va a dar cuenta y va a \r\n    //        renderizar todo\r\n    const [categorias, setcategorias] = useState( ['VALORANT GAME']);\r\n\r\n    // const handleAdd = () => {\r\n    //     setcategorias( [...categorias, 'Los padrinos magicos']);\r\n    //     //               estado anterior y se retorna el nuevo estado\r\n    //     //setcategorias( cats => [...cats, 'Los padrinos magicos'] );\r\n    // }\r\n\r\n    // si quiero mandar a llamar a otro componente es con <Componente />\r\n    // LE PUEDO MANAR UNA FUNCIÓN A MI HIJO PARA QUE MODIFIQUE MI ESTADO\r\n    //    recordando que se puede enviar por referencia\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setcategorias={setcategorias}/>\r\n            <hr/>\r\n\r\n            {/*<button onClick={handleAdd}> AGREGAR </button>*/}\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map( categoria => {\r\n                        return <GifGrid\r\n                                    key={categoria}\r\n                                    category={categoria} \r\n                                />\r\n                    })\r\n                }\r\n            </ol>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp'\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}